<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Picarro.Secutiry.HTTP" enabled="true">
      <stringProp name="TestPlan.comments">Controller HTTP Call Security Testing</stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Admin" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;picarro-administration-menu&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PicarroAdminHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;Admin&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Support" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqapicsup@picarro.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;picarro-administration-menu&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PicarroSupportHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;PicarroSupport&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Picarro Admin" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqapicua@picarro.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;user-manual&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UtilityAdminPicarroHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;PicarroAdmin&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Picarro Supervisor" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqapicsu@picarro.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;user-manual&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CustomerSupervisorHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;PicarroSupervisor&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Picarro Driver" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqapicdr@picarro.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;user-manual&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PicarroDriverHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;PicarroDriver&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer Supervisor" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqacussu@email.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;user-manual&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CustomerSupervisorHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;CustomerSupervisor&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer Driver" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqacusdr1@email.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;user-manual&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CustomerDriverHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;CustomerDriver&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer Admin" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1459897786000</longProp>
        <longProp name="ThreadGroup.end_time">1459897786000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">p3sqaauto.picarro.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AutomationAdmin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="RequestVerificationTokenExtractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">RequestVerificationToken</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[@action=&apos;/Account/Login&apos;]/input/@value</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">RequestVerificationToken</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginPOST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestVerificationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
              <elementProp name="Username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sqacusua@email.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Username</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">sqa#Picarro$0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Account/Login?ReturnUrl=%2FHome</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//*[@id=&quot;user-manual&quot;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">true</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ComplianceReportPOST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/ComplianceReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assessment_POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;ReportTitle&quot;:&quot;test&quot;,&#xd;
   &quot;TimeZoneId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
   &quot;SelectedCustomerId&quot;:&quot;b1252204-04fb-4a67-82d4-3f4666fd855c&quot;,&#xd;
   &quot;MapHeight&quot;:&quot;11&quot;,&#xd;
   &quot;MapWidth&quot;:&quot;8.5&quot;,&#xd;
   &quot;ReportModel&quot;:{  &#xd;
      &quot;SurveyModeTypeId&quot;:&quot;b310238a-a5ae-4e94-927b-f0f165e24522&quot;,&#xd;
      &quot;MinimumAmplitude&quot;:&quot;&quot;,&#xd;
      &quot;ExclusionRadius&quot;:&quot;0&quot;,&#xd;
      &quot;ShowIndications&quot;:true,&#xd;
      &quot;ShowIsotopicAnalysis&quot;:false,&#xd;
      &quot;ShowGaps&quot;:false,&#xd;
      &quot;ShowPercentCoverageAssets&quot;:false,&#xd;
      &quot;ShowPercentCoverageReportArea&quot;:false,&#xd;
      &quot;ShowPercentCoverageForecast&quot;:false,&#xd;
      &quot;FovOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;LisaOpacity&quot;:&quot;0.5&quot;,&#xd;
      &quot;ReportAreaModel&quot;:{  &#xd;
         &quot;ReportAreaModeTypeDesc&quot;:&quot;Custom Boundary&quot;,&#xd;
         &quot;StartLat&quot;:&quot;37.41922165375503&quot;,&#xd;
         &quot;StartLong&quot;:&quot;-121.96578744222937&quot;,&#xd;
         &quot;EndLat&quot;:&quot;37.40517779908774&quot;,&#xd;
         &quot;EndLong&quot;:&quot;-122.01230767538367&quot;,&#xd;
         &quot;BoundaryId&quot;:null&#xd;
      },&#xd;
      &quot;ReportViewModels&quot;:[  &#xd;
         {  &#xd;
            &quot;ViewName&quot;:&quot;View 1&quot;,&#xd;
            &quot;ShowLisa&quot;:true,&#xd;
            &quot;ShowFov&quot;:true,&#xd;
            &quot;ShowVehiclePath&quot;:false,&#xd;
            &quot;ShowIndications&quot;:false,&#xd;
            &quot;ShowIsotopicCaptures&quot;:false,&#xd;
            &quot;ShowAnnotations&quot;:false,&#xd;
            &quot;ShowGaps&quot;:false,&#xd;
            &quot;ShowAssets&quot;:false,&#xd;
            &quot;ShowBoundaries&quot;:false,&#xd;
            &quot;BaseMapId&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;ViewNameOrder&quot;:1&#xd;
         }&#xd;
      ],&#xd;
      &quot;ReportBoundaryLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportAssetLayerModels&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;ReportDrivingSurveyModels&quot;:[  &#xd;
         {  &#xd;
            &quot;SurveyId&quot;:&quot;6c4450dc-a1c3-c2c5-6291-39ceee0b0f57&quot;,&#xd;
            &quot;PeakColor&quot;:&quot;00000000-0000-0000-0001-000000000000&quot;,&#xd;
            &quot;LisaColor&quot;:&quot;00000000-0000-0000-0007-000000000000&quot;,&#xd;
            &quot;IsotopicColor&quot;:&quot;00000000-0000-0000-0006-000000000000&quot;,&#xd;
            &quot;FovColor&quot;:&quot;00000000-0000-0000-0002-000000000000&quot;,&#xd;
            &quot;FovOpacity&quot;:&quot;0.4&quot;,&#xd;
            &quot;LisaOpacity&quot;:&quot;0.5&quot;&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Reports/AssessmentReport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1263448268">{&quot;Message&quot;:&quot;Success&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While EOF paramList.csv" enabled="true">
          <stringProp name="WhileController.condition">${endpoint}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UtilityAdminCustomerHTTPGETS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/${Controller}/${ActionName}${QueryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">paramList_Get.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response= new String(ResponseData);
String role= &quot;CustomerAdmin&quot;;
if (vars.get(role).equals(&quot;NO&quot;)){
	if (!(response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;))){
		FailureMessage = &quot;User(&quot;+role+&quot;) should not be authorized to access this page&quot;;
		Failure = true;
		}else{
			Failure = false;
		}
}else{
	if (response.contains(&quot;document.getElementById(&apos;Username&apos;).focus()&quot;) || response.contains(&quot;&lt;title&gt;Error&lt;/title&gt;&quot;)){
		FailureMessage = &quot;User(&quot;+role+&quot;)  should have access to this page&quot;;
		Failure = true;
	}else{
		Failure = false;
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Surveyor Constants" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="1.  APISecurityTestReport001" elementType="Argument">
            <stringProp name="Argument.name">1.  APISecurityTestReport001</stringProp>
            <stringProp name="Argument.value">7d2c470e-844e-10ff-e2bf-39d9a770f7cc</stringProp>
            <stringProp name="Argument.desc">Copy from TC7313</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="     APISecurityTestView001" elementType="Argument">
            <stringProp name="Argument.name">     APISecurityTestView001</stringProp>
            <stringProp name="Argument.value">2358e72b-c9de-e14c-8b94-39d9cb4f5f85</stringProp>
            <stringProp name="Argument.desc">Test view from APISecurityTestReport001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="     APISecurityTestReportPeak001" elementType="Argument">
            <stringProp name="Argument.name">     APISecurityTestReportPeak001</stringProp>
            <stringProp name="Argument.value">ceb9e766-80c9-588a-1208-39d9a7711b42</stringProp>
            <stringProp name="Argument.desc">Peakid from APISecurityTestReport001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="2. APISecurityTestAssessmentReport001" elementType="Argument">
            <stringProp name="Argument.name">2. APISecurityTestAssessmentReport001</stringProp>
            <stringProp name="Argument.value">ad5f6814-e3e1-27fe-d46c-39d9a77fe852</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="3. APISecurityTestEQReport001" elementType="Argument">
            <stringProp name="Argument.name">3. APISecurityTestEQReport001</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">/Reports/CopyEQReport will be added to test after this report ready</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="4. [APISecurityTestSurvey001]" elementType="Argument">
            <stringProp name="Argument.name">4. [APISecurityTestSurvey001]</stringProp>
            <stringProp name="Argument.value">2f1525c4-5a64-0912-27cf-39d9ac4dd8ff</stringProp>
            <stringProp name="Argument.desc">sqapicdr: simuAuto-Surveyor3 [name is not fixed]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
